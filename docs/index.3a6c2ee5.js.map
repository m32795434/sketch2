{"mappings":"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","sources":["<anon>","etch-a-sketch.js","lib/lib.js"],"sourcesContent":["async function $0a4cb7c67c0f6215$export$5c069c93d2b7493f(ms) {\n    return new Promise((resolve)=>{\n        setTimeout(resolve, ms);\n    });\n}\n\n\nlet $74583206b2429262$var$picker;\nconst $74583206b2429262$var$canvas = document.querySelector(\"#etch-a-sketch\");\nconst $74583206b2429262$var$ctx = $74583206b2429262$var$canvas.getContext(\"2d\");\nconst $74583206b2429262$var$shakeButton = document.querySelector(\".shake\");\nconst $74583206b2429262$var$range = document.querySelector('input[type=\"range\"]');\nconst $74583206b2429262$var$randomColorEl = document.querySelector(\"#random-color\");\nconst $74583206b2429262$var$shapesSelect = document.querySelector(\"#shapes-select\");\nlet $74583206b2429262$var$dotWidthRange = 0;\n//initial values\nconst { width: $74583206b2429262$var$width , height: $74583206b2429262$var$height  } = $74583206b2429262$var$canvas;\nconst $74583206b2429262$var$MOVE_AMOUNT = 40;\n$74583206b2429262$var$ctx.strokeStyle = `hsl(${Math.random() * 360}, 100%, 50%)`;\n$74583206b2429262$var$randomColorEl.value = \"on\";\n$74583206b2429262$var$shapesSelect.value = \"round\";\n// create random x and y,  starting points on the canvas.\nlet $74583206b2429262$var$x = Math.floor(Math.random() * $74583206b2429262$var$width);\nlet $74583206b2429262$var$y = Math.floor(Math.random() * $74583206b2429262$var$height);\n$74583206b2429262$var$ctx.lineJoin = \"round\";\n$74583206b2429262$var$ctx.lineCap = \"round\";\n$74583206b2429262$var$ctx.lineWidth = $74583206b2429262$var$MOVE_AMOUNT;\n$74583206b2429262$var$ctx.beginPath(); // first dot;\n$74583206b2429262$var$ctx.moveTo($74583206b2429262$var$x, $74583206b2429262$var$y);\n$74583206b2429262$var$ctx.lineTo($74583206b2429262$var$x, $74583206b2429262$var$y);\n$74583206b2429262$var$ctx.stroke();\nlet $74583206b2429262$var$isDrawing = false;\nfunction $74583206b2429262$var$handleRange(e) {\n    if (e) $74583206b2429262$var$dotWidthRange = e.target.value;\n    else $74583206b2429262$var$dotWidthRange = $74583206b2429262$var$range.value;\n}\nfunction $74583206b2429262$var$draw(localX, localY) {\n    if ($74583206b2429262$var$randomColorEl.value === \"on\") $74583206b2429262$var$ctx.strokeStyle = `hsl(${Math.random() * 360}, 100%, 50%)`;\n    $74583206b2429262$var$ctx.beginPath();\n    $74583206b2429262$var$ctx.moveTo(localX, localY);\n    $74583206b2429262$var$ctx.lineTo(localX, localY);\n    $74583206b2429262$var$ctx.lineWidth = $74583206b2429262$var$MOVE_AMOUNT * $74583206b2429262$var$dotWidthRange;\n    $74583206b2429262$var$ctx.stroke();\n}\n// Write a handler for the keys and touch events\nfunction $74583206b2429262$var$handleEvent(event, localX, localY) {\n    event.preventDefault();\n    // just hovering, but not drawing?\n    if (event.type === \"mousemove\" && !$74583206b2429262$var$isDrawing) return;\n    if (localY && localX) // if mouse move or down event\n    [$74583206b2429262$var$x, $74583206b2429262$var$y] = [\n        localX,\n        localY\n    ];\n    if (event instanceof TouchEvent) {\n        if (event.type === \"touchstart\") $74583206b2429262$var$isDrawing = true;\n        else if (event.type === \"touchend\" || event.type === \"touchcancel\") {\n            $74583206b2429262$var$isDrawing = false;\n            return;\n        }\n        $74583206b2429262$var$x = event.touches[0].clientX - $74583206b2429262$var$canvas.offsetLeft;\n        $74583206b2429262$var$y = event.touches[0].clientY - $74583206b2429262$var$canvas.offsetTop;\n    }\n    const visualWidth = window.visualViewport.width;\n    if (visualWidth >= 1024 && visualWidth <= 1280) $74583206b2429262$var$draw($74583206b2429262$var$x * 2.7368, $74583206b2429262$var$y * 2.6666); //width: 950px; height: 450px;ok\n    else if (visualWidth >= 844 && visualWidth < 1023) $74583206b2429262$var$draw($74583206b2429262$var$x * 3.2911, $74583206b2429262$var$y * 4);\n    else if (visualWidth <= 843) $74583206b2429262$var$draw($74583206b2429262$var$x * 4.3333, $74583206b2429262$var$y * 4);\n    else // desktop\n    $74583206b2429262$var$draw($74583206b2429262$var$x * 2, $74583206b2429262$var$y * 2); //width: 1300px;height: 600px;ok\n}\n// Clear canvas\nfunction $74583206b2429262$var$clearCanvas() {\n    $74583206b2429262$var$canvas.classList.add(\"shake\");\n    $74583206b2429262$var$ctx.clearRect(0, 0, $74583206b2429262$var$width, $74583206b2429262$var$height);\n    $74583206b2429262$var$canvas.addEventListener(\"animationend\", ()=>{\n        $74583206b2429262$var$canvas.classList.remove(\"shake\");\n    }, {\n        once: true\n    });\n}\nasync function $74583206b2429262$var$handlePicker() {\n    $74583206b2429262$var$picker = document.querySelector(\"#picker\");\n    if ($74583206b2429262$var$picker) {\n        $74583206b2429262$var$pickerEventsAppliyer($74583206b2429262$var$picker);\n        const button = $74583206b2429262$var$picker.shadowRoot.querySelector(\"button\");\n        button.style.cssText += \"transition: width .5s linear; width: 10vw;\";\n    } else {\n        await (0, $0a4cb7c67c0f6215$export$5c069c93d2b7493f)(3000);\n        $74583206b2429262$var$picker = document.querySelector(\"#picker\");\n        if ($74583206b2429262$var$picker) {\n            $74583206b2429262$var$pickerEventsAppliyer($74583206b2429262$var$picker);\n            const button = $74583206b2429262$var$picker.shadowRoot.querySelector(\"button\");\n            button.style.cssText += \"transition: width .5s linear; width: 10vw;\";\n        } else alert(\"Sorry\\uD83D\\uDE15. Color picker not available!\");\n    }\n}\nfunction $74583206b2429262$var$pickerEventsAppliyer(picker) {\n    picker.addEventListener(\"change\", (evt)=>{\n        $74583206b2429262$var$randomColorEl.value = \"off\";\n        $74583206b2429262$var$ctx.strokeStyle = evt.detail.hsl;\n    });\n}\n// Listen for arrow keys and touch events\n// window.addEventListener('keydown', handleEvent);\n$74583206b2429262$var$canvas.addEventListener(\"mousedown\", (e)=>{\n    $74583206b2429262$var$isDrawing = true;\n    $74583206b2429262$var$handleEvent(e, e.offsetX, e.offsetY);\n});\n$74583206b2429262$var$canvas.addEventListener(\"mousemove\", (e)=>$74583206b2429262$var$handleEvent(e, e.offsetX, e.offsetY));\n$74583206b2429262$var$canvas.addEventListener(\"mouseup\", ()=>{\n    $74583206b2429262$var$isDrawing = false;\n});\n$74583206b2429262$var$canvas.addEventListener(\"mouseout\", ()=>{\n    $74583206b2429262$var$isDrawing = false;\n});\n$74583206b2429262$var$canvas.addEventListener(\"touchstart\", (e)=>$74583206b2429262$var$handleEvent(e));\n$74583206b2429262$var$canvas.addEventListener(\"touchmove\", (e)=>{\n    $74583206b2429262$var$handleEvent(e);\n    e.preventDefault();\n});\n$74583206b2429262$var$canvas.addEventListener(\"touchend\", (e)=>$74583206b2429262$var$handleEvent(e));\n$74583206b2429262$var$canvas.addEventListener(\"touchcancel\", (e)=>$74583206b2429262$var$handleEvent(e));\n$74583206b2429262$var$range.addEventListener(\"input\", $74583206b2429262$var$handleRange);\n$74583206b2429262$var$shapesSelect.addEventListener(\"input\", (e)=>{\n    const val = e.currentTarget.value;\n    console.log(\"shape:\", val);\n    $74583206b2429262$var$ctx.lineCap = `${val}`;\n    $74583206b2429262$var$ctx.lineJoin = `${val}`;\n});\n$74583206b2429262$var$randomColorEl.addEventListener(\"input\", (e)=>{\n    const val = e.currentTarget.value;\n    if (val === \"off\") $74583206b2429262$var$picker.color = $74583206b2429262$var$ctx.strokeStyle;\n});\n$74583206b2429262$var$shakeButton.addEventListener(\"click\", $74583206b2429262$var$clearCanvas);\n$74583206b2429262$var$handleRange();\n$74583206b2429262$var$handlePicker(); /* Previous draw functs\r\nfunction draw({ key }) {\r\n  ctx.strokeStyle = `hsl(${Math.random() * 360}, 100%, 50%)`;\r\n  console.log(key);\r\n  // start the path\r\n  ctx.beginPath();\r\n  ctx.moveTo(x, y);\r\n  // move our x and y where the user pressed the arrow key\r\n  switch (key) {\r\n    case 'ArrowUp':\r\n      y -= MOVE_AMOUNT;\r\n      break;\r\n    case 'ArrowDown':\r\n      y += MOVE_AMOUNT;\r\n      break;\r\n    case 'ArrowLeft':\r\n      x -= MOVE_AMOUNT;\r\n      break;\r\n    case 'ArrowRight':\r\n      x += MOVE_AMOUNT;\r\n      break;\r\n    default:\r\n      break;\r\n  }\r\n  ctx.lineWidth = MOVE_AMOUNT * dotWidthRange;\r\n  ctx.lineTo(x, y);\r\n  ctx.stroke();\r\n} \r\nfunction handleKey(e) {\r\n  if (e.key.includes('Arrow')) {\r\n    e.preventDefault(); // stop scrolling\r\n    draw(e);\r\n  }\r\n}\r\nwindow.addEventListener('keydown', handleKey);\r\n\r\n\r\n*/ \n\n\n//# sourceMappingURL=index.3a6c2ee5.js.map\n","import {wait} from './lib/lib'\r\nlet picker;\r\nconst canvas = document.querySelector('#etch-a-sketch');\r\nconst ctx = canvas.getContext('2d');\r\nconst shakeButton = document.querySelector('.shake');\r\nconst range = document.querySelector('input[type=\"range\"]');\r\nconst randomColorEl =  document.querySelector('#random-color')\r\nconst shapesSelect =  document.querySelector('#shapes-select')\r\n\r\nlet dotWidthRange = 0;\r\n\r\n//initial values\r\nconst { width, height } = canvas;\r\nconst MOVE_AMOUNT = 40;\r\nctx.strokeStyle = `hsl(${Math.random() * 360}, 100%, 50%)`;\r\nrandomColorEl.value = \"on\";\r\nshapesSelect.value = \"round\";\r\n\r\n// create random x and y,  starting points on the canvas.\r\nlet x = Math.floor(Math.random() * width);\r\nlet y = Math.floor(Math.random() * height);\r\n\r\nctx.lineJoin = 'round';\r\nctx.lineCap = 'round';\r\nctx.lineWidth = MOVE_AMOUNT;\r\n\r\nctx.beginPath(); // first dot;\r\nctx.moveTo(x, y);\r\nctx.lineTo(x, y);\r\nctx.stroke();\r\n\r\nlet isDrawing = false;\r\n\r\nfunction handleRange(e) {\r\n  if (e) {\r\n    dotWidthRange = e.target.value;\r\n  } else {\r\n    dotWidthRange = range.value;\r\n  }\r\n}\r\n\r\nfunction draw(localX, localY) {\r\n  if(randomColorEl.value === \"on\"){\r\n    ctx.strokeStyle = `hsl(${Math.random() * 360}, 100%, 50%)`;\r\n  }\r\n  ctx.beginPath();\r\n  ctx.moveTo(localX, localY);\r\n  ctx.lineTo(localX, localY);\r\n  ctx.lineWidth = MOVE_AMOUNT * dotWidthRange;\r\n  ctx.stroke();\r\n}\r\n\r\n// Write a handler for the keys and touch events\r\nfunction handleEvent(event, localX, localY) {\r\n  event.preventDefault();\r\n  // just hovering, but not drawing?\r\n  if (event.type === 'mousemove' && !isDrawing) {\r\n    return;\r\n  }\r\n\r\n  if (localY && localX) {\r\n    // if mouse move or down event\r\n    [x, y] = [localX, localY];\r\n  }\r\n\r\n  if (event instanceof TouchEvent) {\r\n    if (event.type === 'touchstart') {\r\n      isDrawing = true;\r\n    } else if (event.type === 'touchend' || event.type === 'touchcancel') {\r\n      isDrawing = false;\r\n      return;\r\n    }\r\n    x = event.touches[0].clientX - canvas.offsetLeft;\r\n    y = event.touches[0].clientY - canvas.offsetTop;\r\n  }\r\n  const visualWidth = window.visualViewport.width;\r\n  if (visualWidth >= 1024 && visualWidth <= 1280) {\r\n    draw(x * 2.7368, y * 2.6666);//width: 950px; height: 450px;ok\r\n  } else if (visualWidth >= 844 && visualWidth < 1023) {//width: 790px;height: 300px;\r\n    draw(x * 3.2911, y * 4);\r\n  }else if (visualWidth <=843) {//width: 600px;height: 300px;\r\n    draw(x * 4.3333, y * 4);\r\n  } else {\r\n    // desktop\r\n    draw(x * 2, y * 2);//width: 1300px;height: 600px;ok\r\n  }\r\n}\r\n\r\n// Clear canvas\r\nfunction clearCanvas() {\r\n  canvas.classList.add('shake');\r\n  ctx.clearRect(0, 0, width, height);\r\n  canvas.addEventListener(\r\n    'animationend',\r\n    () => {\r\n      canvas.classList.remove('shake');\r\n    },\r\n    { once: true }\r\n  );\r\n}\r\n\r\nasync function handlePicker(){\r\n  picker = document.querySelector('#picker');\r\n  if(picker){\r\n    pickerEventsAppliyer(picker)\r\n    const button = picker.shadowRoot.querySelector('button');\r\n    button.style.cssText += 'transition: width .5s linear; width: 10vw;'\r\n  }else{\r\n    await wait(3000);\r\n  picker = document.querySelector('#picker');\r\n    if(picker){\r\n      pickerEventsAppliyer(picker)\r\n      const button = picker.shadowRoot.querySelector('button');\r\n      button.style.cssText += 'transition: width .5s linear; width: 10vw;'\r\n    }else{alert('Sorry😕. Color picker not available!')}\r\n  }\r\n}\r\n\r\nfunction pickerEventsAppliyer(picker){\r\npicker.addEventListener('change', (evt)=>{\r\n  randomColorEl.value = \"off\";\r\n  ctx.strokeStyle =evt.detail.hsl;\r\n})\r\n}\r\n// Listen for arrow keys and touch events\r\n// window.addEventListener('keydown', handleEvent);\r\ncanvas.addEventListener('mousedown', (e) => {\r\n  isDrawing = true;\r\n  handleEvent(e, e.offsetX, e.offsetY);\r\n});\r\ncanvas.addEventListener('mousemove', (e) =>\r\n  handleEvent(e, e.offsetX, e.offsetY)\r\n);\r\ncanvas.addEventListener('mouseup', () => {\r\n  isDrawing = false;\r\n});\r\ncanvas.addEventListener('mouseout', () => {\r\n  isDrawing = false;\r\n});\r\ncanvas.addEventListener('touchstart', (e) => handleEvent(e));\r\ncanvas.addEventListener('touchmove', (e) => {\r\n  handleEvent(e);\r\n  e.preventDefault();\r\n});\r\ncanvas.addEventListener('touchend', (e) => handleEvent(e));\r\ncanvas.addEventListener('touchcancel', (e) => handleEvent(e));\r\n\r\nrange.addEventListener('input', handleRange);\r\nshapesSelect.addEventListener('input', (e)=>{\r\nconst val =  e.currentTarget.value;\r\nconsole.log('shape:', val)\r\nctx.lineCap = `${val}`;\r\nctx.lineJoin = `${val}`;\r\n});\r\nrandomColorEl.addEventListener('input', (e)=>{\r\nconst val = e.currentTarget.value;\r\nif(val ===\"off\") picker.color = ctx.strokeStyle;\r\n})\r\n\r\nshakeButton.addEventListener('click', clearCanvas);\r\n\r\n\r\n\r\n\r\nhandleRange();\r\nhandlePicker();\r\n\r\n/* Previous draw functs\r\nfunction draw({ key }) {\r\n  ctx.strokeStyle = `hsl(${Math.random() * 360}, 100%, 50%)`;\r\n  console.log(key);\r\n  // start the path\r\n  ctx.beginPath();\r\n  ctx.moveTo(x, y);\r\n  // move our x and y where the user pressed the arrow key\r\n  switch (key) {\r\n    case 'ArrowUp':\r\n      y -= MOVE_AMOUNT;\r\n      break;\r\n    case 'ArrowDown':\r\n      y += MOVE_AMOUNT;\r\n      break;\r\n    case 'ArrowLeft':\r\n      x -= MOVE_AMOUNT;\r\n      break;\r\n    case 'ArrowRight':\r\n      x += MOVE_AMOUNT;\r\n      break;\r\n    default:\r\n      break;\r\n  }\r\n  ctx.lineWidth = MOVE_AMOUNT * dotWidthRange;\r\n  ctx.lineTo(x, y);\r\n  ctx.stroke();\r\n} \r\nfunction handleKey(e) {\r\n  if (e.key.includes('Arrow')) {\r\n    e.preventDefault(); // stop scrolling\r\n    draw(e);\r\n  }\r\n}\r\nwindow.addEventListener('keydown', handleKey);\r\n\r\n\r\n*/\r\n","async function wait(ms){\r\nreturn new Promise((resolve)=>{\r\n    setTimeout(resolve,ms)\r\n})\r\n}\r\nexport {wait};"],"names":["$74583206b2429262$var$picker","$0a4cb7c67c0f6215$export$5c069c93d2b7493f","ms","Promise","resolve","setTimeout","$74583206b2429262$var$canvas","document","querySelector","$74583206b2429262$var$ctx","getContext","$74583206b2429262$var$shakeButton","$74583206b2429262$var$range","$74583206b2429262$var$randomColorEl","$74583206b2429262$var$shapesSelect","$74583206b2429262$var$dotWidthRange","width","$74583206b2429262$var$width","height","$74583206b2429262$var$height","strokeStyle","Math","random","value","$74583206b2429262$var$x","floor","$74583206b2429262$var$y","lineJoin","lineCap","lineWidth","beginPath","moveTo","lineTo","stroke","$74583206b2429262$var$isDrawing","$74583206b2429262$var$handleRange","e","target","$74583206b2429262$var$draw","localX","localY","$74583206b2429262$var$MOVE_AMOUNT","$74583206b2429262$var$handleEvent","event","preventDefault","type","TouchEvent","touches","clientX","offsetLeft","clientY","offsetTop","visualWidth","window","visualViewport","$74583206b2429262$var$handlePicker","$74583206b2429262$var$pickerEventsAppliyer","button","shadowRoot","style","cssText","alert","picker","addEventListener","evt","detail","hsl","offsetX","offsetY","val","currentTarget","console","log","color","classList","add","clearRect","remove","once"],"version":3,"file":"index.3a6c2ee5.js.map"}